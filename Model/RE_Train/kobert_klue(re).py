# -*- coding: utf-8 -*-
"""KoBERT-KLUE(RE).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VMuuX7n0A77jLnDYCBIMJekD_q3Mfd6D
"""

from google.colab import drive
drive.mount('/content/drive')

import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import gluonnlp as nlp
import numpy as np
from tqdm import tqdm, tqdm_notebook
from kobert.utils import get_tokenizer
from kobert.pytorch_kobert import get_pytorch_kobert_model
from transformers import AdamW
from transformers.optimization import get_cosine_schedule_with_warmup
import pandas as pd
import json

device = torch.device("cuda:0")
bertmodel, vocab = get_pytorch_kobert_model()

with open("klue-re-v1.1_train.json") as t:
  train_data = json.load(t)
with open("klue-re-v1.1_dev.json") as d:
  dev_data = json.load(d)
with open("relation_list.json") as r:
  relation = json.load(r)

t_data = pd.json_normalize(train_data)
d_data = pd.json_normalize(dev_data)
r_list = pd.json_normalize(relation)

"""# Entity 앞뒤로 토큰 추가 - SE


"""

def se(data):
  subj_s = "<e1>"
  subj_e = "</e1>"
  obj_s = "<e2>"
  obj_e = "</e2>"

  for i in range(len(data)):
    sub_josa = data.iloc[i][1][data.iloc[i][6]+1:].find(" ")
    obj_josa = data.iloc[i][1][data.iloc[i][10]+1:].find(" ")
    sub_josa_parenthesis = data.iloc[i][1][data.iloc[i][5]:].find("(")
    obj_josa_parenthesis = data.iloc[i][1][data.iloc[i][9]:].find("(")


    if sub_josa < 0 or sub_josa + len(data.iloc[i][1][:data.iloc[i][6]+1]) > len(data.iloc[i][1][:data.iloc[i][9]]) or (sub_josa_parenthesis < sub_josa and len(data.iloc[i][1][:data.iloc[i][5]])+ sub_josa_parenthesis >= len(data.iloc[i][1][:data.iloc[i][6]+1])):
      sub_josa = 0
    if obj_josa <0 or obj_josa + len(data.iloc[i][1][:data.iloc[i][10]+1]) > len(data.iloc[i][1][:data.iloc[i][5]]) or (obj_josa_parenthesis < obj_josa and len(data.iloc[i][1][:data.iloc[i][9]]) + obj_josa_parenthesis >= len(data.iloc[i][1][:data.iloc[i][10]+1])):
      obj_josa = 0
    if data.iloc[i][9] < data.iloc[i][5]: #목적어가 주어보다 먼저 나오는 경우
      sen = data.iloc[i][1][:data.iloc[i][9]] + obj_s + data.iloc[i][1][data.iloc[i][9]:data.iloc[i][10]+1+obj_josa] + obj_e + data.iloc[i][1][data.iloc[i][10]+1+obj_josa:data.iloc[i][5]] + subj_s + data.iloc[i][1][data.iloc[i][5]:data.iloc[i][6]+1+sub_josa] + subj_e + data.iloc[i][1][data.iloc[i][6]+1+sub_josa:]
    else :
      sen = data.iloc[i][1][:data.iloc[i][5]] + subj_s + data.iloc[i][1][data.iloc[i][5]:data.iloc[i][6]+1+sub_josa] + subj_e + data.iloc[i][1][data.iloc[i][6]+1+sub_josa:data.iloc[i][9]] + obj_s + data.iloc[i][1][data.iloc[i][9]:data.iloc[i][10]+1+obj_josa] + obj_e + data.iloc[i][1][data.iloc[i][10]+1+obj_josa:]
    data.sentence[i] = sen
    print( str(i) + " / " + str(len(data)))

se(t_data)
se(d_data)

"""# 불필요한 정보 제거"""

def drop_category(data):
  data.drop("guid", axis=1, inplace=True)
  data.drop("source", axis=1, inplace=True)
  data.drop("subject_entity.start_idx", axis=1, inplace=True)
  data.drop("subject_entity.end_idx", axis=1, inplace=True)
  data.drop("object_entity.start_idx", axis=1, inplace=True)
  data.drop("object_entity.end_idx", axis=1, inplace=True)

drop_category(t_data)
drop_category(d_data)

data_concat = pd.concat([t_data, d_data])

"""# Relation encoding"""

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
encoder.fit(data_concat['label'])
data_concat['label'] = encoder.transform(data_concat['label'])
mapping = dict(zip(range(len(encoder.classes_)), encoder.classes_))
mapping

"""# 모델 입력 Data만들기"""

data_list = []
for sen, label in zip(data_concat['sentence'], data_concat['label'])  :
    data = []
    data.append(sen)
    data.append(str(label))

    data_list.append(data)

from sklearn.model_selection import train_test_split
train, test = train_test_split(data_list, test_size=0.2, random_state=42)
print("train shape is:", len(train))
print("test shape is:", len(test))

class BERTDataset(Dataset):
    def __init__(self, dataset, sentence_idx, label_idx, bert_tokenizer, max_len, pad, pair):
        transform = nlp.data.BERTSentenceTransform(
            bert_tokenizer, max_seq_length=max_len, pad=pad, pair=pair) 

        self.sentence = [transform([i[sentence_idx]]) for i in dataset]
        self.label = [np.int32(i[label_idx]) for i in dataset]

    def __getitem__(self, i):
        return (self.sentence[i] + (self.label[i], ))

    def __len__(self):
        return (len(self.label))

# Setting parameters
max_len = 100 # 해당 길이를 초과하는 단어에 대해선 bert가 학습하지 않음
batch_size = 64
warmup_ratio = 0.1
num_epochs = 20
max_grad_norm = 1
log_interval = 200
learning_rate = 5e-5

tokenizer = get_tokenizer()
tok = nlp.data.BERTSPTokenizer(tokenizer, vocab, lower=False)

data_train = BERTDataset(train, 0, 1, tok, max_len, True, False)
data_test = BERTDataset(test, 0, 1, tok, max_len, True, False)
data_train[0]

# pytorch용 DataLoader 사용
train_dataloader = torch.utils.data.DataLoader(data_train, batch_size=batch_size, num_workers=5)
test_dataloader = torch.utils.data.DataLoader(data_test, batch_size=batch_size, num_workers=5)

class BERTClassifier(nn.Module):
    def __init__(self,
                 bert,
                 hidden_size = 768,
                 num_classes = 30, # softmax 사용 <- binary일 경우는 2
                 dr_rate=None,
                 params=None):
        super(BERTClassifier, self).__init__()
        self.bert = bert
        self.dr_rate = dr_rate
                 
        self.classifier = nn.Linear(hidden_size , num_classes)
        if dr_rate:
            self.dropout = nn.Dropout(p=dr_rate)
    
    def gen_attention_mask(self, token_ids, valid_length):
        attention_mask = torch.zeros_like(token_ids)
        for i, v in enumerate(valid_length):
            attention_mask[i][:v] = 1
        return attention_mask.float()

    def forward(self, token_ids, valid_length, segment_ids):
        attention_mask = self.gen_attention_mask(token_ids, valid_length)
        
        _, pooler = self.bert(input_ids = token_ids, token_type_ids = segment_ids.long(), attention_mask = attention_mask.float().to(token_ids.device))
        if self.dr_rate:
            out = self.dropout(pooler)
        return self.classifier(out)

#bert 모델 불러오기
model = BERTClassifier(bertmodel, dr_rate=0.5).to(device)

# Prepare optimizer and schedule (linear warmup and decay)
no_decay = ['bias', 'LayerNorm.weight']
optimizer_grouped_parameters = [
    {'params': [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},
    {'params': [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}
]

# 옵티마이저 선언
optimizer = AdamW(optimizer_grouped_parameters, lr=learning_rate)
loss_fn = nn.CrossEntropyLoss() # softmax용 Loss Function 정하기 <- binary classification도 해당 loss function 사용 가능

t_total = len(train_dataloader) * num_epochs
warmup_step = int(t_total * warmup_ratio)

scheduler = get_cosine_schedule_with_warmup(optimizer, num_warmup_steps=warmup_step, num_training_steps=t_total)

# 학습 평가 지표인 accuracy 계산 -> 얼마나 타겟값을 많이 맞추었는가
def calc_accuracy(X,Y):
    max_vals, max_indices = torch.max(X, 1)
    train_acc = (max_indices == Y).sum().data.cpu().numpy()/max_indices.size()[0]
    return train_acc

# 모델 학습 시작
for e in range(num_epochs):
    train_acc = 0.0
    test_acc = 0.0
    model.train()
    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(train_dataloader)):
        optimizer.zero_grad()
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)
        valid_length= valid_length
        label = label.long().to(device)
        out = model(token_ids, valid_length, segment_ids)
        loss = loss_fn(out, label)
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)
        optimizer.step()
        scheduler.step()  # Update learning rate schedule
        train_acc += calc_accuracy(out, label)
        if batch_id % log_interval == 0:
            print("epoch {} batch id {} loss {} train acc {}                                                                                                                                                                            ".format(e+1, batch_id+1, loss.data.cpu().numpy(), train_acc / (batch_id+1)))
    print("epoch {} train acc {}".format(e+1, train_acc / (batch_id+1)))
    
    model.eval()
    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(test_dataloader)):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)
        valid_length= valid_length
        label = label.long().to(device)
        out = model(token_ids, valid_length, segment_ids)
        test_acc += calc_accuracy(out, label)
    print("epoch {} test acc {}".format(e+1, test_acc / (batch_id+1)))

# 모델 저장하기
torch.save(model.state_dict(), "/content/drive/MyDrive/KoBERT_KLUE_se20.pt")